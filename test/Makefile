TOP=..

-include $(TOP)/build/config.mk

.IGNORE: # ignore all errors during test compilation/run so we always get a full run.
.SILENT:

TOPDIR=$(shell pwd)/..
NPM_PREFIX=$(shell npm prefix -g)
NODE_PATH=$(TOPDIR)/node-llvm/build/Release:$(TOPDIR)/lib/generated:$(NPM_PREFIX)/lib/node_modules
NODE_FLAGS=--harmony --harmony-typeof
TRACEUR_FLAGS=--block-binding true

MODULE_DIRS=--moduledir $(TOP)/node-compat --moduledir $(TOP)/ejs-llvm

TESTS:=$(wildcard *[0-9].js)

# this test just sucks
TESTS:=$(filter-out alloc1.js,$(TESTS))

# these test for es6 stuff that neither node nor ejs supports
TESTS:=$(filter-out modules2.js,$(TESTS))
TESTS:=$(filter-out iterators1.js,$(TESTS))
TESTS:=$(filter-out proxy4.js,$(TESTS))
# esprima uses the JS regexp ctor while parsing regexps to validate them.  node can't deal with the regexp in this file.
TESTS:=$(filter-out regexp6.js,$(TESTS))
# this test fails for stage1 but not for stage0.  we need to add a way to disable tests just for particular stages
TESTS:=$(filter-out generator12.js,$(TESTS))

# disable the esprima tests for the time being, as the new module syntax (and losing require) breaks them.
# we need to fork esprima/escodegen/estraverse and port them to es6 modules for these tests.
TESTS:=$(filter-out esprima%,$(TESTS))

ESPRIMA_TESTS=$(filter esprima%,$(TESTS))
ESPRIMA_TESTS:=$(ESPRIMA_TESTS:%.js=%.js.exe)

addExpectedFailureInner=EXPECTED_FAILURES += $(1)
addTraceurTestInner=TRACEUR_TESTS += $(1)

define addExpectedFailure
  $(eval $(call addExpectedFailureInner, $(1)))
endef

define testAgainstTraceur
  $(eval $(call addTraceurTestInner, $(1)))
endef

EXPECTED_FAILURES=
$(call addExpectedFailure, argv1.js,                "node passes ['node','argv1.js'], we return ['argv1.js.exe']")
$(call addExpectedFailure, date1.js,                "fails because we test the Date() function, which returns the current time.  this differs from the current time when the node test runs.  bleah.")
$(call addExpectedFailure, date3.js,                "the first date is off by an hour.  timegm/localtime_r screwup?")
$(call addExpectedFailure, forin2.js,               "fails because we don't properly handle deleting properties while iterating")
$(call addExpectedFailure, forin5.js,               "fails because we enumerate the entire range 0..length of an array, including the holes.")
$(call addExpectedFailure, object6.js,              "fails because we don't define everything we should.")
$(call addExpectedFailure, number1.js,              "fails because node outputs {} for console.log(new Number(5)), while SM and JSC output '5'.  we err on the SM/JSC side of things here.")
$(call addExpectedFailure, number-tostring2.js,     "formatting floats with different bases just doesn't work.")
$(call addExpectedFailure, typedarray0.js,          "we throw an exception when typed array constructors are called as functions.")
$(call addExpectedFailure, typedarray3.js,          "we use %g to format floats/doubles, and differ when printing numbers.")
$(call addExpectedFailure, typedarray6.js,          "we use %g to format floats/doubles, and differ when printing numbers.")
$(call addExpectedFailure, array19.js,              "we don't support property descriptors at all for array elements.  also needs more from ECMA262 15.4.5.1")
$(call addExpectedFailure, fib1.js,                 "we don't output numbers correctly (integers with exponent <= 20 should print out normally)")
$(call addExpectedFailure, const1.js,               "we permit assigning to const bindings")
$(call addExpectedFailure, number-toFixed1.js,      "not implemented fully yet")
$(call addExpectedFailure, number-toPrecision1.js,  "not implemented fully yet")
$(call addExpectedFailure, object7.js,              "we differ from node on property descriptor flags.  verify with spec")
$(call addExpectedFailure, object9.js,              "we differ from node on property descriptor flags.  verify with spec")
$(call addExpectedFailure, symbol-object.js,        "")

$(call addExpectedFailure, generator13.js, "")
$(call addExpectedFailure, generator14.js, "")
$(call addExpectedFailure, generator15.js, "")
$(call addExpectedFailure, generator16.js, "")
$(call addExpectedFailure, generator20.js, "")
$(call addExpectedFailure, generator21.js, "")
$(call addExpectedFailure, generator4.js, "")
$(call addExpectedFailure, generator6.js, "")
$(call addExpectedFailure, generator8.js, "")

$(call addExpectedFailure, array-subclassing2.js, "")
$(call addExpectedFailure, array-subclassing3.js, "")
$(call addExpectedFailure, array-subclassing4.js, "")

$(call addExpectedFailure, number-subclassing1.js, "")
$(call addExpectedFailure, set-subclassing1.js, "")
$(call addExpectedFailure, string-subclassing1.js, "")

$(call addExpectedFailure, object18.js, "")

$(call addExpectedFailure, math1.js, "")
$(call addExpectedFailure, math2.js, "")

TRACEUR_TESTS=
$(call testAgainstTraceur, array-subclass1.js)
$(call testAgainstTraceur, class3.js)
$(call testAgainstTraceur, closure3.js)
$(call testAgainstTraceur, for5.js)
$(call testAgainstTraceur, for6.js)
$(call testAgainstTraceur, forof1.js)
$(call testAgainstTraceur, forof2.js)
$(call testAgainstTraceur, computed-props1.js)
$(call testAgainstTraceur, computed-props3.js)
$(call testAgainstTraceur, shorthand-prop1.js)
$(call testAgainstTraceur, shorthand-method1.js)
$(call testAgainstTraceur, spread1.js)
$(call testAgainstTraceur, spread2.js)
$(call testAgainstTraceur, spread3.js)
$(call testAgainstTraceur, spread4.js)
$(call testAgainstTraceur, spread5.js)
$(call testAgainstTraceur, spread6.js)
$(call testAgainstTraceur, spread7.js)
$(call testAgainstTraceur, string-fromCodePoint1.js)
$(call testAgainstTraceur, string-raw1.js)
$(call testAgainstTraceur, symbol-iterator1.js)
$(call testAgainstTraceur, promise1.js)
$(call testAgainstTraceur, promise2.js)

all-local:: check

#check: check-unit-tests run-tests
#check-stage1: check-unit-tests run-tests-stage1

check: run-tests
check-stage1: run-tests-stage1

check-unit-tests: check-llvm check-set

build-tests: $(patsubst %.js,%.js.exe,$(TESTS))

build-tests-stage1:
	@$(MAKE) EJS_DRIVER="$(TOPDIR)/ejs.exe" EJS_STAGE=1 build-tests

check-llvm:
	mocha llvm-test.js

check-set:
	mocha set-test.js

run-tests: clean-results generate-expected prepare-xfail $(patsubst %.js,test-%,$(TESTS)) format-results

run-tests-stage1:
	@$(MAKE) EJS_DRIVER="$(TOPDIR)/ejs.exe" EJS_STAGE=1 run-tests

clean-results:
	@rm -f .successes .failures .xfail .xsuccess .expected-failures

write_xfail=echo $(1) >> .expected-failures

generate-expected: $(patsubst %.js,expected/%.js.expected-out,$(TESTS))

prepare-xfail:
	@cat /dev/null > .expected-failures
	@$(foreach xfail,$(EXPECTED_FAILURES),$(call write_xfail,$(xfail));)

format-results:
	@success_count=`cat .successes 2>/dev/null| wc -l | sed -e 's, ,,g'`; \
	failure_count=`cat .failures 2>/dev/null| wc -l | sed -e 's, ,,g'`; \
	xfail_count=`cat .xfail 2>/dev/null| wc -l | sed -e 's, ,,g'`; \
	xsuccess_count=`cat .xsuccess 2>/dev/null| wc -l | sed -e 's, ,,g'`; \
	echo "$$xsuccess_count unexpected successes, $$success_count expected"; \
	echo "$$failure_count unexpected failures, $$xfail_count expected"; \
	echo "============"; \
	failed=false; \
	if test -f .failures; then \
	  echo "Unexpected failures:"; \
	  cat .failures; \
	  echo; \
	  failed=true; \
	fi; \
	if test -f .xsuccess; then \
	  echo "Unexpected successes:"; \
	  cat .xsuccess; \
	  echo; \
	  failed=true; \
	fi; \
	if test "x$$failed" = xtrue; then \
	  exit 1; \
	fi

compile-tests: $(patsubst %.js,%.js.exe,$(TESTS))

test-%: .%.js.ejs-out expected/%.js.expected-out
	-@test_js=`echo $@|sed -e s,test-,,`.js; \
	if [ -z "$V" ]; then /bin/echo -n [stage$(EJS_STAGE)] $$test_js; else echo $(EJS_DRIVER) $(EJS_DRIVER_ARGS) $$test_js; fi; \
	if cmp -s .$$test_js.ejs-out expected/$$test_js.expected-out ; then \
		if grep -e ^$$test_js .expected-failures /dev/null 2>&1; then \
			echo "   \033[33mXSUCCESS\033[0m"; \
			echo $$test_js >> .xsuccess; \
		else \
			echo "   \033[32mSUCCESS\033[0m"; \
			echo $$test_js >> .successes; \
		fi \
	else \
		if grep -e ^$$test_js .expected-failures > /dev/null 2>&1; then \
			echo "   \033[33mXFAIL\033[0m"; \
			echo $$test_js >> .xfail; \
		else \
			echo "   \033[31mFAILURE\033[0m"; \
			echo $$test_js >> .failures; \
			diff -u .$$test_js.ejs-out expected/$$test_js.expected-out > .$$test_js.diff; \
		fi \
	fi

%.js: %.coffee
	@coffee -c $<

echo-%:
	-@test_js=`echo $@|sed -e s,echo-,,`; \
	/bin/echo -n "$$test_js:   "

.%.js.ejs-out: %.js.exe
	-@EXE=`echo $<`; ./$$EXE > $@

expected/%.js.expected-out: %.js
	@if echo $(TRACEUR_TESTS) | grep $< > /dev/null; then \
		echo Generating expected output for $< using traceur; \
		NODE_PATH=$(NODE_PATH) traceur $(TRACEUR_FLAGS) $< > $@ ; \
	else \
		echo Generating expected output for $< using node; \
		NODE_PATH=$(NODE_PATH) node $(NODE_FLAGS) $< > $@; \
	fi

$(ESPRIMA_TESTS): %.js.exe: %.js $(TOPDIR)/esprima/esprima-es6.js $(TOPDIR)/escodegen/escodegen-es6.js $(TOPDIR)/estraverse/estraverse-es6.js $(TOPDIR)/runtime/libecho.a
	@cp $(TOPDIR)/esprima/esprima-es6.js .
	@cp $(TOPDIR)/escodegen/escodegen-es6.js .
	@cp $(TOPDIR)/estraverse/estraverse-es6.js .
	@echo [ejs stage$(EJS_STAGE)] $< && $(EJS_DRIVER) $(EJS_DRIVER_ARGS) $<

clean-esprima-roundtrip:
	@rm -f esprima-es6.js escodegen-es6.js estraverse-es6.js

EJS_DRIVER_ARGS ?= --leave-temp -q
EJS_DRIVER ?= NODE_PATH=$(NODE_PATH) $(TOPDIR)/ejs
EJS_STAGE ?= 0

%.js.exe: %.js $(TOPDIR)/runtime/libecho.a
	@$(EJS_DRIVER) $(EJS_DRIVER_ARGS) --srcdir $(MODULE_DIRS) $< 

v8-%.js.exe: v8/%.js $(TOPDIR)/runtime/libecho.a
	NODE_PATH=$(NODE_PATH) $(TOPDIR)/ejs --srcdir $(MODULE_DIRS) $<

run-node:
	NODE_PATH=$(NODE_PATH) node

node-path:
	echo $(NODE_PATH)

clean-local:: clean-results clean-esprima-roundtrip
	rm -f *.o *.js.exe .*.diff .*-out .failures .successes .xfail .xsuccess
	rm -rf *.dSYM

.PRECIOUS: $(TESTS:%.js=expected/%.js.expected-out)


compare-%:
	-@test_js=`echo $@|sed -e s,compare-,,`.js; \
	$(TOPDIR)/ejs.js.exe.stage0 $(EJS_DRIVER_ARGS) $$test_js; \
	mv /tmp/$$test_js.1.ll $$test_js.ll.stage0; \
	$(TOPDIR)/ejs.js.exe.stage1 $(EJS_DRIVER_ARGS) $$test_js; \
	mv /tmp/$$test_js.1.ll $$test_js.ll.stage1; \
	diff -us $$test_js.ll.stage0 $$test_js.ll.stage1; \
	rm $$test_js.ll.stage0 $$test_js.ll.stage1

-include $(TOP)/build/build.mk
